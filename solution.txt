Part A
(1) vulnerability
The vulnerability that we discovered is the user part in the javascript file. As long as we insert an > into the code, we can add whatever javascript file we want.

(2) how does the attack work
We insert a > and add a script section. In the script section, we create a new Image and set its src to be the sendemail url with document.cookie as it payload. In order to stop the page from testing the username, we reset the document location so that it can return to the original user page.

(3) how to mitigate the vulnerability
We can check if there is a script section before appending it into the file.

Attack B:
1. The vulnerability is that the browser will automatically send the cookie when we submit the transfer zoobars form. Anyone that can trick the victim to send a form can send the zoobars on the behalf of the victim. It is a typical XSS attack.

2. Our attack to do that is:
a. First create a form that looks very similar to the transferForm in transfer.php. But we just keep the input and submit html tags and set visibility to hidden.
b. We add the script to automatically click the submit button when the victim load the html file. In order to wait for the response, we use setTimeout before we change the window location. One thing to notice here is that we need to send the form target to another frame. The reason for doing that is that the form response will automatically replace the original frame and cover the remaining codes(change window location). So we create another frame and set the form's target to that frame. That frame's visibility is also set to hidden as well.
c. After a time elapse, we get the response from transfer.php and shows it in the hidden iframe, we redirect the window to www.bing.com.

3. The problem can be mitigated by using content security policy to define which operations are allowed on the browser. Also, we can add browser XSS filters.

Attack C:
1. The vulnerability here is in the checkLogin part.
In the fucntion _addRegistration():
We register the username with quoted($username):
$sql = "INSERT INTO Person (Username, Password, Salt) " .
           "VALUES ('$quoteduser', '$hashedpassword', '$salt')";
Then we login into the user account,.

In the function _checkLogin():
// It first checks if the user exists using the $quoteduser.
$quoteduser = $this->db->quote($username);
$sql = "SELECT Salt FROM Person WHERE Username = '$quoteduser'";
$rs = $this->db->executeQuery($sql);
if ( !$rs->next() ) return false;   // No such user

But then when we are trying to validate if the username and the password match, we use $username.
$salt = $rs->getValueByNr(0,0);
$hashedpassword = md5($password.$salt);
$sql = "SELECT * FROM Person WHERE " .
           "Username = '$username' AND " .
           "Password = '$hashedpassword'";
$result = $this->db->executeQuery($sql);

It makes it possible that $quoteduser exists, but it is not the same user as $username. And also the response page of registering and logining page looks exactly the same. We can register a new user with similar username but with "'--", but log in as the original username.

2. Our attack is to create a user with username equals quoted($username) and $username contains "'--" go comment out the password comparison in sql queries.
In order to avoid registering duplicate user when we are inputting the same username on the website multiple times, we add a random value to the username.
The whole workflow of the website is listed below.
a. The user inputs the username on the website
b. When the user clicks login, we are actually modifying the username the user inputs.
$username = $username(user inputs) + "'--" + Math.floor(Math.random() * 10000);
c. We submit the form to registeration instead of login

3. To prevent the attack, we need to make sure that we use consistent version of $username. That means always using the $quoteduser when we are executing sql queries. Also, we can add additional information to make sure that the login page and registering page return different response page and it is easy to tell the differences.
